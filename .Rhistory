### Regional Plots
- 주변에 어떤 gene들이 있는 지 확인 가능
- 색깔은 유전자들 사이의 연관성을 표현함
### Rare Variants Analysis
- Combined Multivariate and Collapsing (CMC)
- WSS
- C - alpha
- SKAT, SKAT-O
gender <- read.table("plink.sexcheck", header=T,as.is=T)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
data = read.table("clipboard", header = T)
data = read.table("clipboard", header = T)
data = read.table("clipboard", header = T, sep=',')
View(data)
data = read.table("clipboard", header = T, sep='')
data = read.table("clipboard", header = T, sep=' ')
data = read.table(file = "clipboard", header = T)
library(readxl)
data = read_excel("D:\\Donga\\CI\\Radial Loop Data Yong.xlsx")
data = data.frame(data)
require(moonBook)
mytable(~., data=data)
View(data)
data[is.na(data$HTN)] <- 0
data$HTN[is.na(data$HTN)] <- 0
View(data)
data$DM[is.na(data$DM)] <- 0
data$CVA[is.na(data$CVA)] <- 0
data$Alcohol[is.na(data$Alcohol)] <- 0
data$Smoking[is.na(data$Smoking)] <- 0
data$Dyslipidemia[is.na(data$Dyslipidemia)] <- 0
data$CKD[is.na(data$CKD)] <- 0
mytable(~., data=data)
summary = mytable(~., data=data)
View(summary)
write.csv(data,"summary.csv")
write.csv(summary,"summary.csv")
?mytable
summary = mytable(~., data=data, method=2)
View(summary)
# htseq-count를 통해 만들어진 raw count table을 불러옵니다.
raw.count = read.table(file="2-2.RNA-seq_raw_count.txt", header=TRUE, row.names=NULL)
setwd("D:/VIDEO/04_GENOME/20210628_KOGO/01_NGS를 통한 중개연구(최무림)/2-2.RNA_seq_실습파일/2-2.RNA_seq_실습파일")
# htseq-count를 통해 만들어진 raw count table을 불러옵니다.
raw.count = read.table(file="2-2.RNA-seq_raw_count.txt", header=TRUE, row.names=NULL)
View(raw.count)
# 불러온 테이블이 어떻게 생겼는지 살펴봅니다.
dim(raw.count)
head(raw.count)
# 이제 DESeq2에 input으로 들어갈 table에 대한 정보를 담고 있는 sample.info 데이터 프레임을 만들어 줍니다.
sample.info = data.frame(row.names=c("case1","case2","control1","control2","control3","case3"), condition= factor(c("Sample","Sample","Control","Control","Control","Sample")))
# 방금 만든 sample.info 정보 테이블을 살펴봅니다.
dim(sample.info)
head(sample.info)
# 자! 이제 DESeq package에 들어갈 데이터가 모두 완료 되었습니다.
# sample.info + raw count --> 'DESeqDataSetFromMatrix' 이라는 function을 통해 dataset으로 변환시켜 줍니다.
data = DESeqDataSetFromMatrix(countData = raw.count, colData = sample.info ,design =~ condition)
# R로 방금 설치한 package를 불러오는 작업
library("DESeq2")
# 자! 이제 DESeq package에 들어갈 데이터가 모두 완료 되었습니다.
# sample.info + raw count --> 'DESeqDataSetFromMatrix' 이라는 function을 통해 dataset으로 변환시켜 줍니다.
data = DESeqDataSetFromMatrix(countData = raw.count, colData = sample.info ,design =~ condition)
# R로 방금 설치한 package를 불러오는 작업
library("DESeq2")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# R로 방금 설치한 package를 불러오는 작업
library("DESeq2")
# 자! 이제 DESeq package에 들어갈 데이터가 모두 완료 되었습니다.
# sample.info + raw count --> 'DESeqDataSetFromMatrix' 이라는 function을 통해 dataset으로 변환시켜 줍니다.
data = DESeqDataSetFromMatrix(countData = raw.count, colData = sample.info ,design =~ condition)
library("Seurat")
library("DESeq2")
library("ggplot2")
library("cowplot")
library("dplyr")
library("patchwork")
library(rlang)
install.packages("rlang")
setwd("D:/VIDEO/04_GENOME/20210628_KOGO/01_NGS를 통한 중개연구(최무림)/2-3_single_cell_RNA_sequencing")
library(ggplot2)
library(dplyr)
library(Seurat)
library(patchwork)
library(cowplot)
################################################
# 1. read data #################################
################################################
pbmc.data <- Read10X(data.dir="./pbmc3k")
pbmc <- CreateSeuratObject(pbmc.data, project='pbmc.3k')
################################################
# 2. QC and cell selection######################
################################################
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
################################################
# 3. Normalizing data###########################
################################################
# By default, we employ a global-scaling normalization method “LogNormalize”
# that normalizes the feature expression measurements for each cell by the total expression,
# multiplies this by a scale factor (10,000 by default), and log-transforms the result.
# Normalized values are stored in pbmc[["RNA"]]@data.
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
################################################
# 3. Feature selection #########################
################################################
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
ggsave("variable_features.pdf", width=15, height=8)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
################################################
# 5. Linear dimensional reduction ##############
################################################
# Next we perform PCA on the scaled data.
# By default, only the previously determined variable features are used as input,
# but can be defined using features argument if you wish to choose a different subset.
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Examine and visualize PCA results a few different ways
# print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
ggsave("PCA_dim_loadings.pdf", width=6, height=4)
DimPlot(pbmc, reduction = "pca")
ggsave("PCA_plot.pdf", width=4, height=4)
########################
#### 6-2 : Elbow Plot ##
########################
# An alternative heuristic method generates an ‘Elbow plot’:
# a ranking of principle components based on the percentage of variance explained by each one
# Find the "elbow point"
ElbowPlot(pbmc)
ggsave("elbow_plot.pdf", width=4, height=4)
################################################
# 7. Cluster cells #############################
################################################
# we first construct a KNN graph based on the euclidean distance in PCA space,
# and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity).
# This step is performed using the FindNeighbors() function, and takes as input the previously defined dimensionality of the dataset (first 10 PCs).
pbmc <- FindNeighbors(pbmc, dims = 1:10)
# To cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default)
# to iteratively group cells together, with the goal of optimizing the standard modularity function.
# The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering,
# with increased values leading to a greater number of clusters.
# recommend between 0.4-1.2 for around 3k cells.
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
################################################
# 8. Run UMAP ##################################
################################################
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages = 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10) # if not available, run TSNE as an alternative
pbmc <- RunTSNE(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label individual clusters
DimPlot(pbmc, reduction = "umap")
ggsave("umap.pdf", width=5, height=5)
DimPlot(pbmc, reduction = "tsne")
ggsave("tsne_plot.pdf", width=5, height=5)
################################################
# 9. Find cluster biomarkers ###################
################################################
# find all markers of cluster 2 ( = cluster 2 vs all others)
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2, min.pct = 0.25)
head(cluster2.markers, n = 5)
write.csv(cluster2.markers,"cluster2_markers.csv")
# find all markers distinguishing cluster 5 from clusters 0 and 3 (= cluster 5 vs [cluster 0 & 3])
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
install.packages("bookdown")
Sys.which("make")
install.packages("remotes")
remotes::install_github("anthonynorth/rscodeio")
rscodeio::install_theme()
